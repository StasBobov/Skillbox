# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT


import sys
import urllib.request
from termcolor import cprint, colored
from mastermind_engine import make_number, test_number
import time

cprint('ДОБРО ПОЖАЛОВАТЬ, СТРАННИК!\n', color='red')

counter = 0
program_color = 'blue'

def new_game(again):
    if again == 1:
        make_number()
        time.sleep(1)
        cprint('      ИГРА НАЧАЛАСЬ!!!\n', color='red')
        time.sleep(1)
        cprint('Я загадал четырёхзначное число, попробуй отгадать его\n', color=program_color)
        time.sleep(1)
    elif again == 0:
        sys.exit()

new_game(1)


while True:
    if_number = input(colored('Введите четырёхзначное число с неповторяющимися цифрами: ', color=program_color))
    if not if_number.isdigit():
        cprint('Вы не ввели число, попробуйте ещё раз', color=program_color)
        continue
    if len(if_number) != 4:
        print('Надо ввести 4 неповторяющиеся цифры, попробуйте ещё раз', color=program_color)
        continue
    number_set = set(if_number)
    if len(number_set) != 4:
        print('Цифры не должны повторяться, попробуйте ещё раз', color=program_color)
        continue
    counter += 1
    res = test_number(if_number)
    if res['bulls'] == 4:
        cprint('ПОЗДРАВЛЯЮ, ПОБЕДА ЗА {0} ХОДОВ!'.format(counter), color='red')
        counter = 0
        again = 'I will ask'
        while True:
            again = input(colored('Хотите ещё партию? Да - 1, нет - 0 ',  color=program_color))
            if again == '1':
                new_game(int(again))
                break
            elif again == '0':
                new_game(int(again))
    else:
        print('быки - {0}, коровы - {1}'.format(res['bulls'], res['cows']))


